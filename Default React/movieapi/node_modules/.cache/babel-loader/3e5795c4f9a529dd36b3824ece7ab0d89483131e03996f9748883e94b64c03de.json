{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nexport const STATUSES = Object.freeze({\n  IDLE: \"idle\",\n  ERROR: \"error\",\n  LOADING: \"loading\"\n});\nexport const fetchBanner = createAsyncThunk('banners/fetch', async _ref => {\n  let {\n    MoviesorTv\n  } = _ref;\n  const options = {\n    method: 'GET',\n    headers: {\n      accept: 'application/json',\n      Authorization: 'bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI2MThiZjAxNGZjNzc4ZDk5MTdmYzRiOTAxOTFmODAyMSIsInN1YiI6IjYwOTBjMzM5ZjZmZDE4MDAyYTAwOGY3MiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.L8yuJmX3xWQi-FTdIVHiE6hZpJym2eKj5TfEqr_TsEY'\n    }\n  };\n  const res = await fetch(`https://api.themoviedb.org/3/${MoviesorTv}/popular?page=1`, options);\n  const data = await res.json();\n  const ageAsInt = parseInt(1);\n  return data;\n});\nconst bannerSlice = createSlice({\n  name: 'banner',\n  initialState: {\n    data: [],\n    status: STATUSES.IDLE\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchBanner.pending, (state, action) => {\n      state.status = STATUSES.LOADING;\n    }).addCase(fetchBanner.fulfilled, (state, action) => {\n      state.data = action.payload.results;\n      state.status = STATUSES.IDLE;\n    }).addCase(fetchBanner.rejected, (state, action) => {\n      state.status = STATUSES.ERROR;\n    });\n  }\n});\nexport const selectRandomBanner = state => {\n  const {\n    data\n  } = state.banner;\n  const filteredMovies = data.filter(movie => movie.vote_average > 6);\n  if (filteredMovies.length > 0) {\n    const randomIndex = Math.floor(Math.random() * filteredMovies.length);\n    return filteredMovies[randomIndex];\n  }\n  return null;\n};\nexport default bannerSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","configureStore","STATUSES","Object","freeze","IDLE","ERROR","LOADING","fetchBanner","_ref","MoviesorTv","options","method","headers","accept","Authorization","res","fetch","data","json","ageAsInt","parseInt","bannerSlice","name","initialState","status","extraReducers","builder","addCase","pending","state","action","fulfilled","payload","results","rejected","selectRandomBanner","banner","filteredMovies","filter","movie","vote_average","length","randomIndex","Math","floor","random","reducer"],"sources":["E:/React/Movie API/movieapi/Default React/movieapi/src/Store/bannerSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { configureStore } from \"@reduxjs/toolkit\";\n\nexport const STATUSES = Object.freeze({\n  IDLE: \"idle\",\n  ERROR: \"error\",\n  LOADING: \"loading\"\n});\n\nexport const fetchBanner = createAsyncThunk('banners/fetch', async ({MoviesorTv}) => {\n    const options = {\n        method: 'GET',\n        headers: {\n            accept: 'application/json',\n            Authorization: 'bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI2MThiZjAxNGZjNzc4ZDk5MTdmYzRiOTAxOTFmODAyMSIsInN1YiI6IjYwOTBjMzM5ZjZmZDE4MDAyYTAwOGY3MiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.L8yuJmX3xWQi-FTdIVHiE6hZpJym2eKj5TfEqr_TsEY'\n\n        },\n\n    };\n\n    const res = await fetch(`https://api.themoviedb.org/3/${MoviesorTv}/popular?page=1`, options);\n    const data = await res.json();\n\n    const ageAsInt = parseInt(1);\n\n\n\n    return data;\n});\n\nconst bannerSlice = createSlice({\n  name: 'banner',\n  initialState: {\n    data: [],\n    status: STATUSES.IDLE,\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchBanner.pending, (state, action) => {\n        state.status = STATUSES.LOADING;\n      })\n      .addCase(fetchBanner.fulfilled, (state, action) => {\n        state.data = action.payload.results;\n        state.status = STATUSES.IDLE;\n      })\n      .addCase(fetchBanner.rejected, (state, action) => {\n        state.status = STATUSES.ERROR;\n      });\n  }\n});\n\nexport const selectRandomBanner = (state) => {\n  const { data } = state.banner;\n\n\n  const filteredMovies = data.filter((movie) => movie.vote_average > 6);\n\n\n  if (filteredMovies.length > 0) {\n    const randomIndex = Math.floor(Math.random() * filteredMovies.length);\n    return filteredMovies[randomIndex];\n  }\n  return null;\n};\n\nexport default bannerSlice.reducer;\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,SAASC,cAAc,QAAQ,kBAAkB;AAEjD,OAAO,MAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAM,CAAC;EACpCC,IAAI,EAAE,MAAM;EACZC,KAAK,EAAE,OAAO;EACdC,OAAO,EAAE;AACX,CAAC,CAAC;AAEF,OAAO,MAAMC,WAAW,GAAGT,gBAAgB,CAAC,eAAe,EAAE,MAAAU,IAAA,IAAwB;EAAA,IAAjB;IAACC;EAAU,CAAC,GAAAD,IAAA;EAC5E,MAAME,OAAO,GAAG;IACZC,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACLC,MAAM,EAAE,kBAAkB;MAC1BC,aAAa,EAAE;IAEnB;EAEJ,CAAC;EAED,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,gCAA+BP,UAAW,iBAAgB,EAAEC,OAAO,CAAC;EAC7F,MAAMO,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;EAE7B,MAAMC,QAAQ,GAAGC,QAAQ,CAAC,CAAC,CAAC;EAI5B,OAAOH,IAAI;AACf,CAAC,CAAC;AAEF,MAAMI,WAAW,GAAGtB,WAAW,CAAC;EAC9BuB,IAAI,EAAE,QAAQ;EACdC,YAAY,EAAE;IACZN,IAAI,EAAE,EAAE;IACRO,MAAM,EAAEvB,QAAQ,CAACG;EACnB,CAAC;EACDqB,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACpB,WAAW,CAACqB,OAAO,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC/CD,KAAK,CAACL,MAAM,GAAGvB,QAAQ,CAACK,OAAO;IACjC,CAAC,CAAC,CACDqB,OAAO,CAACpB,WAAW,CAACwB,SAAS,EAAE,CAACF,KAAK,EAAEC,MAAM,KAAK;MACjDD,KAAK,CAACZ,IAAI,GAAGa,MAAM,CAACE,OAAO,CAACC,OAAO;MACnCJ,KAAK,CAACL,MAAM,GAAGvB,QAAQ,CAACG,IAAI;IAC9B,CAAC,CAAC,CACDuB,OAAO,CAACpB,WAAW,CAAC2B,QAAQ,EAAE,CAACL,KAAK,EAAEC,MAAM,KAAK;MAChDD,KAAK,CAACL,MAAM,GAAGvB,QAAQ,CAACI,KAAK;IAC/B,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM8B,kBAAkB,GAAIN,KAAK,IAAK;EAC3C,MAAM;IAAEZ;EAAK,CAAC,GAAGY,KAAK,CAACO,MAAM;EAG7B,MAAMC,cAAc,GAAGpB,IAAI,CAACqB,MAAM,CAAEC,KAAK,IAAKA,KAAK,CAACC,YAAY,GAAG,CAAC,CAAC;EAGrE,IAAIH,cAAc,CAACI,MAAM,GAAG,CAAC,EAAE;IAC7B,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGR,cAAc,CAACI,MAAM,CAAC;IACrE,OAAOJ,cAAc,CAACK,WAAW,CAAC;EACpC;EACA,OAAO,IAAI;AACb,CAAC;AAED,eAAerB,WAAW,CAACyB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}